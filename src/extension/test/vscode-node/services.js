"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.createExtensionTestingServices = createExtensionTestingServices;
const copilotTokenStore_1 = require("../../../platform/authentication/common/copilotTokenStore");
const blockedExtensionService_1 = require("../../../platform/chat/common/blockedExtensionService");
const chatMLFetcher_1 = require("../../../platform/chat/common/chatMLFetcher");
const chatSessionService_1 = require("../../../platform/chat/common/chatSessionService");
const testChatSessionService_1 = require("../../../platform/chat/test/common/testChatSessionService");
const naiveChunkerService_1 = require("../../../platform/chunking/node/naiveChunkerService");
const mockRunCommandExecutionService_1 = require("../../../platform/commands/common/mockRunCommandExecutionService");
const runCommandExecutionService_1 = require("../../../platform/commands/common/runCommandExecutionService");
const configurationService_1 = require("../../../platform/configuration/common/configurationService");
const defaultsOnlyConfigurationService_1 = require("../../../platform/configuration/common/defaultsOnlyConfigurationService");
const debugOutputService_1 = require("../../../platform/debug/common/debugOutputService");
const debugOutputServiceImpl_1 = require("../../../platform/debug/vscode/debugOutputServiceImpl");
const dialogService_1 = require("../../../platform/dialog/common/dialogService");
const diffService_1 = require("../../../platform/diff/common/diffService");
const diffServiceImpl_1 = require("../../../platform/diff/node/diffServiceImpl");
const embeddingsComputer_1 = require("../../../platform/embeddings/common/embeddingsComputer");
const remoteEmbeddingsComputer_1 = require("../../../platform/embeddings/common/remoteEmbeddingsComputer");
const capiClient_1 = require("../../../platform/endpoint/common/capiClient");
const domainService_1 = require("../../../platform/endpoint/common/domainService");
const endpointProvider_1 = require("../../../platform/endpoint/common/endpointProvider");
const capiClientImpl_1 = require("../../../platform/endpoint/node/capiClientImpl");
const domainServiceImpl_1 = require("../../../platform/endpoint/node/domainServiceImpl");
const testEndpointProvider_1 = require("../../../platform/endpoint/test/node/testEndpointProvider");
const envService_1 = require("../../../platform/env/common/envService");
const envServiceImpl_1 = require("../../../platform/env/vscode/envServiceImpl");
const extensionContext_1 = require("../../../platform/extContext/common/extensionContext");
const extensionsService_1 = require("../../../platform/extensions/common/extensionsService");
const extensionsService_2 = require("../../../platform/extensions/vscode/extensionsService");
const fileSystemService_1 = require("../../../platform/filesystem/common/fileSystemService");
const fileSystemServiceImpl_1 = require("../../../platform/filesystem/node/fileSystemServiceImpl");
const gitDiffService_1 = require("../../../platform/git/common/gitDiffService");
const gitExtensionService_1 = require("../../../platform/git/common/gitExtensionService");
const gitService_1 = require("../../../platform/git/common/gitService");
const gitExtensionServiceImpl_1 = require("../../../platform/git/vscode/gitExtensionServiceImpl");
const gitServiceImpl_1 = require("../../../platform/git/vscode/gitServiceImpl");
const githubService_1 = require("../../../platform/github/common/githubService");
const octoKitServiceImpl_1 = require("../../../platform/github/common/octoKitServiceImpl");
const ignoreService_1 = require("../../../platform/ignore/common/ignoreService");
const imageService_1 = require("../../../platform/image/common/imageService");
const languageDiagnosticsService_1 = require("../../../platform/languages/common/languageDiagnosticsService");
const languageFeaturesService_1 = require("../../../platform/languages/common/languageFeaturesService");
const languageDiagnosticsServiceImpl_1 = require("../../../platform/languages/vscode/languageDiagnosticsServiceImpl");
const editLogService_1 = require("../../../platform/multiFileEdit/common/editLogService");
const multiFileEditQualityTelemetry_1 = require("../../../platform/multiFileEdit/common/multiFileEditQualityTelemetry");
const completionsFetchService_1 = require("../../../platform/nesFetch/common/completionsFetchService");
const completionsFetchServiceImpl_1 = require("../../../platform/nesFetch/node/completionsFetchServiceImpl");
const alternativeContent_1 = require("../../../platform/notebook/common/alternativeContent");
const alternativeContentEditGenerator_1 = require("../../../platform/notebook/common/alternativeContentEditGenerator");
const mockAlternativeContentService_1 = require("../../../platform/notebook/common/mockAlternativeContentService");
const notebookService_1 = require("../../../platform/notebook/common/notebookService");
const notificationService_1 = require("../../../platform/notification/common/notificationService");
const promptPathRepresentationService_1 = require("../../../platform/prompts/common/promptPathRepresentationService");
const remoteRepositories_1 = require("../../../platform/remoteRepositories/vscode/remoteRepositories");
const nullRequestLogger_1 = require("../../../platform/requestLogger/node/nullRequestLogger");
const requestLogger_1 = require("../../../platform/requestLogger/node/requestLogger");
const reviewService_1 = require("../../../platform/review/common/reviewService");
const scopeSelection_1 = require("../../../platform/scopeSelection/common/scopeSelection");
const scopeSelectionImpl_1 = require("../../../platform/scopeSelection/vscode-node/scopeSelectionImpl");
const searchService_1 = require("../../../platform/search/common/searchService");
const searchServiceImpl_1 = require("../../../platform/search/vscode-node/searchServiceImpl");
const simulationTestContext_1 = require("../../../platform/simulationTestContext/common/simulationTestContext");
const tabsAndEditorsService_1 = require("../../../platform/tabs/common/tabsAndEditorsService");
const tabsAndEditorsServiceImpl_1 = require("../../../platform/tabs/vscode/tabsAndEditorsServiceImpl");
const nullTelemetryService_1 = require("../../../platform/telemetry/common/nullTelemetryService");
const telemetry_1 = require("../../../platform/telemetry/common/telemetry");
const terminalService_1 = require("../../../platform/terminal/common/terminalService");
const terminalServiceImpl_1 = require("../../../platform/terminal/vscode/terminalServiceImpl");
const extensionContext_2 = require("../../../platform/test/node/extensionContext");
const services_1 = require("../../../platform/test/node/services");
const simulationWorkspaceServices_1 = require("../../../platform/test/node/simulationWorkspaceServices");
const testProvider_1 = require("../../../platform/testing/common/testProvider");
const workspaceMutationManager_1 = require("../../../platform/testing/common/workspaceMutationManager");
const setupTestDetector_1 = require("../../../platform/testing/node/setupTestDetector");
const testProviderImpl_1 = require("../../../platform/testing/vscode/testProviderImpl");
const tokenizer_1 = require("../../../platform/tokenizer/node/tokenizer");
const workspaceService_1 = require("../../../platform/workspace/common/workspaceService");
const workspaceServiceImpl_1 = require("../../../platform/workspace/vscode/workspaceServiceImpl");
const descriptors_1 = require("../../../util/vs/platform/instantiation/common/descriptors");
const commandService_1 = require("../../commands/node/commandService");
const promptWorkspaceLabels_1 = require("../../context/node/resolvers/promptWorkspaceLabels");
const userActions_1 = require("../../conversation/vscode-node/userActions");
const conversationStore_1 = require("../../conversationStore/node/conversationStore");
const testInfoStorage_1 = require("../../intents/node/testIntent/testInfoStorage");
const linkifyService_1 = require("../../linkify/common/linkifyService");
const launchConfigService_1 = require("../../onboardDebug/common/launchConfigService");
const commandToConfigConverter_1 = require("../../onboardDebug/node/commandToConfigConverter");
const debuggableCommandIdentifier_1 = require("../../onboardDebug/node/debuggableCommandIdentifier");
const languageToolsProvider_1 = require("../../onboardDebug/node/languageToolsProvider");
const launchConfigService_2 = require("../../onboardDebug/vscode/launchConfigService");
const chatMLFetcher_2 = require("../../prompt/node/chatMLFetcher");
const feedbackReporter_1 = require("../../prompt/node/feedbackReporter");
const promptVariablesService_1 = require("../../prompt/node/promptVariablesService");
const todoListContextProvider_1 = require("../../prompt/node/todoListContextProvider");
const gitDiffService_2 = require("../../prompt/vscode-node/gitDiffService");
const promptVariablesService_2 = require("../../prompt/vscode-node/promptVariablesService");
const codeMapperService_1 = require("../../prompts/node/codeMapper/codeMapperService");
const fixCookbookService_1 = require("../../prompts/node/inline/fixCookbookService");
const setupTestsFileManager_1 = require("../../testing/node/setupTestsFileManager");
const editToolLearningService_1 = require("../../tools/common/editToolLearningService");
const toolsService_1 = require("../../tools/common/toolsService");
const toolGroupingService_1 = require("../../tools/common/virtualTools/toolGroupingService");
const virtualToolGroupCache_1 = require("../../tools/common/virtualTools/virtualToolGroupCache");
const virtualToolTypes_1 = require("../../tools/common/virtualTools/virtualToolTypes");
/**
 * A default context for VSCode extension testing, building on general one in `lib`.
 * Only includes items that are needed for almost all extension tests.
 */
function createExtensionTestingServices() {
    const testingServiceCollection = (0, services_1._createBaselineServices)();
    testingServiceCollection.define(fileSystemService_1.IFileSystemService, new descriptors_1.SyncDescriptor(fileSystemServiceImpl_1.NodeFileSystemService));
    testingServiceCollection.define(configurationService_1.IConfigurationService, new descriptors_1.SyncDescriptor(defaultsOnlyConfigurationService_1.DefaultsOnlyConfigurationService));
    testingServiceCollection.define(envService_1.IEnvService, new descriptors_1.SyncDescriptor(TestEnvService));
    testingServiceCollection.define(simulationTestContext_1.ISimulationTestContext, new descriptors_1.SyncDescriptor(simulationTestContext_1.NulSimulationTestContext));
    testingServiceCollection.define(requestLogger_1.IRequestLogger, new descriptors_1.SyncDescriptor(nullRequestLogger_1.NullRequestLogger));
    testingServiceCollection.define(feedbackReporter_1.IFeedbackReporter, new descriptors_1.SyncDescriptor(feedbackReporter_1.NullFeedbackReporterImpl));
    testingServiceCollection.define(endpointProvider_1.IEndpointProvider, new descriptors_1.SyncDescriptor(testEndpointProvider_1.TestEndpointProvider, [undefined, undefined, undefined, undefined, false, undefined]));
    testingServiceCollection.define(copilotTokenStore_1.ICopilotTokenStore, new descriptors_1.SyncDescriptor(copilotTokenStore_1.CopilotTokenStore));
    testingServiceCollection.define(domainService_1.IDomainService, new descriptors_1.SyncDescriptor(domainServiceImpl_1.DomainService));
    testingServiceCollection.define(capiClient_1.ICAPIClientService, new descriptors_1.SyncDescriptor(capiClientImpl_1.CAPIClientImpl));
    testingServiceCollection.define(notificationService_1.INotificationService, new descriptors_1.SyncDescriptor(notificationService_1.NullNotificationService));
    testingServiceCollection.define(commandService_1.ICommandService, new descriptors_1.SyncDescriptor(commandService_1.CommandServiceImpl));
    testingServiceCollection.define(promptVariablesService_1.IPromptVariablesService, new descriptors_1.SyncDescriptor(promptVariablesService_2.PromptVariablesServiceImpl));
    testingServiceCollection.define(extensionContext_1.IVSCodeExtensionContext, new descriptors_1.SyncDescriptor(extensionContext_2.MockExtensionContext));
    testingServiceCollection.define(ignoreService_1.IIgnoreService, new descriptors_1.SyncDescriptor(ignoreService_1.NullIgnoreService));
    testingServiceCollection.define(remoteRepositories_1.IRemoteRepositoriesService, new descriptors_1.SyncDescriptor(remoteRepositories_1.RemoteRepositoriesService));
    testingServiceCollection.define(workspaceService_1.IWorkspaceService, new descriptors_1.SyncDescriptor(workspaceServiceImpl_1.ExtensionTextDocumentManager));
    testingServiceCollection.define(extensionsService_1.IExtensionsService, new descriptors_1.SyncDescriptor(extensionsService_2.VSCodeExtensionsService));
    testingServiceCollection.define(chatMLFetcher_1.IChatMLFetcher, new descriptors_1.SyncDescriptor(chatMLFetcher_2.ChatMLFetcherImpl));
    testingServiceCollection.define(imageService_1.IImageService, imageService_1.nullImageService);
    testingServiceCollection.define(tabsAndEditorsService_1.ITabsAndEditorsService, new descriptors_1.SyncDescriptor(tabsAndEditorsServiceImpl_1.TabsAndEditorsServiceImpl));
    testingServiceCollection.define(embeddingsComputer_1.IEmbeddingsComputer, new descriptors_1.SyncDescriptor(remoteEmbeddingsComputer_1.RemoteEmbeddingsComputer));
    testingServiceCollection.define(telemetry_1.ITelemetryService, new descriptors_1.SyncDescriptor(nullTelemetryService_1.NullTelemetryService));
    testingServiceCollection.define(languageDiagnosticsService_1.ILanguageDiagnosticsService, new descriptors_1.SyncDescriptor(languageDiagnosticsServiceImpl_1.LanguageDiagnosticsServiceImpl));
    testingServiceCollection.define(tokenizer_1.ITokenizerProvider, new descriptors_1.SyncDescriptor(tokenizer_1.TokenizerProvider, [true]));
    testingServiceCollection.define(promptWorkspaceLabels_1.IPromptWorkspaceLabels, new descriptors_1.SyncDescriptor(promptWorkspaceLabels_1.PromptWorkspaceLabels));
    testingServiceCollection.define(gitDiffService_1.IGitDiffService, new descriptors_1.SyncDescriptor(gitDiffService_2.GitDiffService));
    testingServiceCollection.define(gitExtensionService_1.IGitExtensionService, new descriptors_1.SyncDescriptor(gitExtensionServiceImpl_1.GitExtensionServiceImpl));
    testingServiceCollection.define(gitService_1.IGitService, new descriptors_1.SyncDescriptor(gitServiceImpl_1.GitServiceImpl));
    testingServiceCollection.define(githubService_1.IOctoKitService, new descriptors_1.SyncDescriptor(octoKitServiceImpl_1.OctoKitService));
    testingServiceCollection.define(setupTestDetector_1.ISetupTestsDetector, new descriptors_1.SyncDescriptor(setupTestDetector_1.NullSetupTestsDetector));
    testingServiceCollection.define(workspaceMutationManager_1.IWorkspaceMutationManager, new descriptors_1.SyncDescriptor(setupTestsFileManager_1.WorkspaceMutationManager));
    testingServiceCollection.define(testProvider_1.ITestProvider, new descriptors_1.SyncDescriptor(testProviderImpl_1.TestProvider));
    testingServiceCollection.define(naiveChunkerService_1.INaiveChunkingService, new descriptors_1.SyncDescriptor(naiveChunkerService_1.NaiveChunkingService));
    testingServiceCollection.define(linkifyService_1.ILinkifyService, new descriptors_1.SyncDescriptor(linkifyService_1.LinkifyService));
    testingServiceCollection.define(testInfoStorage_1.ITestGenInfoStorage, new descriptors_1.SyncDescriptor(testInfoStorage_1.TestGenInfoStorage));
    testingServiceCollection.define(editToolLearningService_1.IEditToolLearningService, new descriptors_1.SyncDescriptor(editToolLearningService_1.EditToolLearningService));
    testingServiceCollection.define(commandToConfigConverter_1.IDebugCommandToConfigConverter, new descriptors_1.SyncDescriptor(commandToConfigConverter_1.DebugCommandToConfigConverter));
    testingServiceCollection.define(launchConfigService_1.ILaunchConfigService, new descriptors_1.SyncDescriptor(launchConfigService_2.LaunchConfigService));
    testingServiceCollection.define(debuggableCommandIdentifier_1.IDebuggableCommandIdentifier, new descriptors_1.SyncDescriptor(debuggableCommandIdentifier_1.DebuggableCommandIdentifier));
    testingServiceCollection.define(languageToolsProvider_1.ILanguageToolsProvider, new descriptors_1.SyncDescriptor(languageToolsProvider_1.LanguageToolsProvider));
    testingServiceCollection.define(editLogService_1.IEditLogService, new descriptors_1.SyncDescriptor(editLogService_1.EditLogService));
    testingServiceCollection.define(multiFileEditQualityTelemetry_1.IMultiFileEditInternalTelemetryService, new descriptors_1.SyncDescriptor(multiFileEditQualityTelemetry_1.MultiFileEditInternalTelemetryService));
    testingServiceCollection.define(codeMapperService_1.ICodeMapperService, new descriptors_1.SyncDescriptor(codeMapperService_1.CodeMapperService));
    testingServiceCollection.define(alternativeContent_1.IAlternativeNotebookContentService, new descriptors_1.SyncDescriptor(mockAlternativeContentService_1.MockAlternativeNotebookContentService));
    testingServiceCollection.define(alternativeContentEditGenerator_1.IAlternativeNotebookContentEditGenerator, new descriptors_1.SyncDescriptor(alternativeContentEditGenerator_1.AlternativeNotebookContentEditGenerator));
    testingServiceCollection.define(diffService_1.IDiffService, new descriptors_1.SyncDescriptor(diffServiceImpl_1.DiffServiceImpl));
    testingServiceCollection.define(completionsFetchService_1.ICompletionsFetchService, new descriptors_1.SyncDescriptor(completionsFetchServiceImpl_1.CompletionsFetchService));
    testingServiceCollection.define(debugOutputService_1.IDebugOutputService, new descriptors_1.SyncDescriptor(debugOutputServiceImpl_1.DebugOutputServiceImpl));
    testingServiceCollection.define(userActions_1.IUserFeedbackService, new descriptors_1.SyncDescriptor(userActions_1.UserFeedbackService));
    testingServiceCollection.define(terminalService_1.ITerminalService, new descriptors_1.SyncDescriptor(terminalServiceImpl_1.TerminalServiceImpl));
    testingServiceCollection.define(conversationStore_1.IConversationStore, new descriptors_1.SyncDescriptor(conversationStore_1.ConversationStore));
    testingServiceCollection.define(fixCookbookService_1.IFixCookbookService, new descriptors_1.SyncDescriptor(fixCookbookService_1.FixCookbookService));
    testingServiceCollection.define(reviewService_1.IReviewService, new descriptors_1.SyncDescriptor(simulationWorkspaceServices_1.SimulationReviewService));
    testingServiceCollection.define(blockedExtensionService_1.IBlockedExtensionService, new descriptors_1.SyncDescriptor(blockedExtensionService_1.BlockedExtensionService));
    testingServiceCollection.define(dialogService_1.IDialogService, new descriptors_1.SyncDescriptor(simulationWorkspaceServices_1.TestingDialogService));
    testingServiceCollection.define(languageFeaturesService_1.ILanguageFeaturesService, new descriptors_1.SyncDescriptor(languageFeaturesService_1.NoopLanguageFeaturesService));
    testingServiceCollection.define(scopeSelection_1.IScopeSelector, new descriptors_1.SyncDescriptor(scopeSelectionImpl_1.ScopeSelectorImpl));
    testingServiceCollection.define(promptPathRepresentationService_1.IPromptPathRepresentationService, new descriptors_1.SyncDescriptor(promptPathRepresentationService_1.PromptPathRepresentationService));
    testingServiceCollection.define(toolsService_1.IToolsService, new descriptors_1.SyncDescriptor(toolsService_1.NullToolsService));
    testingServiceCollection.define(chatSessionService_1.IChatSessionService, new descriptors_1.SyncDescriptor(testChatSessionService_1.TestChatSessionService));
    testingServiceCollection.define(notebookService_1.INotebookService, new descriptors_1.SyncDescriptor(simulationWorkspaceServices_1.SimulationNotebookService));
    testingServiceCollection.define(runCommandExecutionService_1.IRunCommandExecutionService, new descriptors_1.SyncDescriptor(mockRunCommandExecutionService_1.MockRunCommandExecutionService));
    testingServiceCollection.define(searchService_1.ISearchService, new descriptors_1.SyncDescriptor(searchServiceImpl_1.SearchServiceImpl));
    testingServiceCollection.define(virtualToolTypes_1.IToolGroupingCache, new descriptors_1.SyncDescriptor(virtualToolGroupCache_1.ToolGroupingCache));
    testingServiceCollection.define(virtualToolTypes_1.IToolGroupingService, new descriptors_1.SyncDescriptor(toolGroupingService_1.ToolGroupingService));
    testingServiceCollection.define(todoListContextProvider_1.ITodoListContextProvider, new descriptors_1.SyncDescriptor(todoListContextProvider_1.TodoListContextProvider));
    return testingServiceCollection;
}
class TestEnvService extends envServiceImpl_1.EnvServiceImpl {
    get sessionId() {
        return 'test-session';
    }
    get machineId() {
        return 'test-machine';
    }
}
//# sourceMappingURL=services.js.map