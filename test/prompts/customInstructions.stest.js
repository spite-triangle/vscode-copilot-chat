"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const assert_1 = __importDefault(require("assert"));
const editCodeIntent_1 = require("../../src/extension/intents/node/editCodeIntent");
const configurationService_1 = require("../../src/platform/configuration/common/configurationService");
const stest_1 = require("../base/stest");
const inlineChatSimulator_1 = require("../simulation/inlineChatSimulator");
const stestUtil_1 = require("../simulation/stestUtil");
(0, stest_1.ssuite)({ title: 'custom instructions', location: 'inline' }, () => {
    let configurations = [
        {
            key: configurationService_1.ConfigKey.CodeGenerationInstructions,
            value: [
                { "text": "Field names should start with the prefix 'f'", "language": "typescript" },
                { "text": "Add a comment: 'Generated by Copilot'" }
            ]
        }
    ];
    (0, stest_1.stest)({ description: 'Custom instructions for language', configurations }, (testingServiceCollection) => {
        return (0, inlineChatSimulator_1.simulateInlineChat)(testingServiceCollection, {
            files: [(0, stestUtil_1.toFile)({ fileName: "hello.ts", fileContents: "\n\n" })],
            queries: [
                {
                    file: 'hello.ts',
                    selection: [0, 0, 0, 0],
                    query: [
                        `/edit add a class named 'Foo' with a field 'address' along with getters and setters`,
                    ].join('\n'),
                    expectedIntent: editCodeIntent_1.EditCodeIntent.ID,
                    validate: async (outcome, workspace, accessor) => {
                        assert_1.default.strictEqual(outcome.type, 'inlineEdit');
                        assert_1.default.ok(outcome.fileContents.includes(' fAddress'));
                        assert_1.default.ok(outcome.fileContents.includes('Generated by Copilot'));
                    }
                }
            ]
        });
    });
    configurations = [
        {
            key: configurationService_1.ConfigKey.CodeGenerationInstructions,
            value: [
                { "text": "Field names should start with the prefix 'f'", "language": "javascript" },
                { "text": "Add a comment: 'Generated by Copilot'", "language": "java" },
            ]
        }
    ];
    (0, stest_1.stest)({ description: 'Custom instructions not applicable to language', configurations }, (testingServiceCollection) => {
        return (0, inlineChatSimulator_1.simulateInlineChat)(testingServiceCollection, {
            files: [
                (0, stestUtil_1.toFile)({ fileName: "hello.ts", fileContents: "\n\n" }),
            ],
            queries: [
                {
                    file: 'hello.ts',
                    selection: [0, 0, 0, 0],
                    query: [
                        `/edit add a class named 'Foo' with a field 'address' along with getters and setters`,
                    ].join('\n'),
                    expectedIntent: editCodeIntent_1.EditCodeIntent.ID,
                    validate: async (outcome, workspace, accessor) => {
                        assert_1.default.strictEqual(outcome.type, 'inlineEdit');
                        assert_1.default.ok(!outcome.fileContents.includes(' fAddress'));
                        assert_1.default.ok(!outcome.fileContents.includes('Generated by Copilot'));
                    }
                }
            ]
        });
    });
    const configurations2 = [
        {
            key: configurationService_1.ConfigKey.CodeGenerationInstructions,
            value: [
                { "file": "code-guidelines.md" }
            ]
        }
    ];
    (0, stest_1.stest)({ description: 'Custom instructions from file', configurations: configurations2 }, (testingServiceCollection) => {
        return (0, inlineChatSimulator_1.simulateInlineChat)(testingServiceCollection, {
            files: [
                (0, stestUtil_1.toFile)({ fileName: "hello.ts", fileContents: "\n\n" }),
                (0, stestUtil_1.toFile)({ fileName: "code-guidelines.md", fileContents: "\n\nField names should start with the prefix '__'\n" })
            ],
            queries: [
                {
                    file: 'hello.ts',
                    selection: [0, 0, 0, 0],
                    query: [
                        `/edit add a class named 'Foo' with a field 'address' along with getters and setters`,
                    ].join('\n'),
                    expectedIntent: editCodeIntent_1.EditCodeIntent.ID,
                    validate: async (outcome, workspace, accessor) => {
                        assert_1.default.strictEqual(outcome.type, 'inlineEdit');
                        assert_1.default.ok(outcome.fileContents.includes(' __address'));
                    }
                }
            ]
        });
    });
    const configurations3 = [
        {
            key: configurationService_1.ConfigKey.CodeGenerationInstructions,
            value: [
                { "file": "code-guidelines1.md" },
                { "text": "Add a comment: 'Generated by Copilot'", "language": "typescript" },
            ]
        }
    ];
    (0, stest_1.stest)({ description: 'Custom instructions with missing file', configurations: configurations3 }, (testingServiceCollection) => {
        return (0, inlineChatSimulator_1.simulateInlineChat)(testingServiceCollection, {
            files: [
                (0, stestUtil_1.toFile)({ fileName: "hello.ts", fileContents: "\n\n" }),
                (0, stestUtil_1.toFile)({ fileName: "code-guidelines.md", fileContents: "\n\nField names should start with the prefix '__'\n" })
            ],
            queries: [
                {
                    file: 'hello.ts',
                    selection: [0, 0, 0, 0],
                    query: [
                        `/edit add a class named 'Foo' with a field 'address' along with getters and setters`,
                    ].join('\n'),
                    expectedIntent: editCodeIntent_1.EditCodeIntent.ID,
                    validate: async (outcome, workspace, accessor) => {
                        assert_1.default.strictEqual(outcome.type, 'inlineEdit');
                        assert_1.default.ok(!outcome.fileContents.includes(' __address'));
                        assert_1.default.ok(outcome.fileContents.includes('Generated by Copilot'));
                    }
                }
            ]
        });
    });
});
//# sourceMappingURL=customInstructions.stest.js.map